{"ast":null,"code":"'use strict';\n\nvar GetIntrinsic = require('../GetIntrinsic');\n\nvar $TypeError = GetIntrinsic('%TypeError%');\n\nvar $arraySlice = require('../helpers/callBound')('Array.prototype.slice');\n\nvar Call = require('./Call');\n\nvar GetV = require('./GetV');\n\nvar IsPropertyKey = require('./IsPropertyKey'); // https://ecma-international.org/ecma-262/6.0/#sec-invoke\n\n\nmodule.exports = function Invoke(O, P) {\n  if (!IsPropertyKey(P)) {\n    throw new $TypeError('P must be a Property Key');\n  }\n\n  var argumentsList = $arraySlice(arguments, 2);\n  var func = GetV(O, P);\n  return Call(func, O, argumentsList);\n};","map":{"version":3,"sources":["C:/Users/vaibhav/GIT-HUB/link-io/reactApp/node_modules/es-abstract/2019/Invoke.js"],"names":["GetIntrinsic","require","$TypeError","$arraySlice","Call","GetV","IsPropertyKey","module","exports","Invoke","O","P","argumentsList","arguments","func"],"mappings":"AAAA;;AAEA,IAAIA,YAAY,GAAGC,OAAO,CAAC,iBAAD,CAA1B;;AAEA,IAAIC,UAAU,GAAGF,YAAY,CAAC,aAAD,CAA7B;;AAEA,IAAIG,WAAW,GAAGF,OAAO,CAAC,sBAAD,CAAP,CAAgC,uBAAhC,CAAlB;;AAEA,IAAIG,IAAI,GAAGH,OAAO,CAAC,QAAD,CAAlB;;AACA,IAAII,IAAI,GAAGJ,OAAO,CAAC,QAAD,CAAlB;;AACA,IAAIK,aAAa,GAAGL,OAAO,CAAC,iBAAD,CAA3B,C,CAEA;;;AAEAM,MAAM,CAACC,OAAP,GAAiB,SAASC,MAAT,CAAgBC,CAAhB,EAAmBC,CAAnB,EAAsB;AACtC,MAAI,CAACL,aAAa,CAACK,CAAD,CAAlB,EAAuB;AACtB,UAAM,IAAIT,UAAJ,CAAe,0BAAf,CAAN;AACA;;AACD,MAAIU,aAAa,GAAGT,WAAW,CAACU,SAAD,EAAY,CAAZ,CAA/B;AACA,MAAIC,IAAI,GAAGT,IAAI,CAACK,CAAD,EAAIC,CAAJ,CAAf;AACA,SAAOP,IAAI,CAACU,IAAD,EAAOJ,CAAP,EAAUE,aAAV,CAAX;AACA,CAPD","sourcesContent":["'use strict';\n\nvar GetIntrinsic = require('../GetIntrinsic');\n\nvar $TypeError = GetIntrinsic('%TypeError%');\n\nvar $arraySlice = require('../helpers/callBound')('Array.prototype.slice');\n\nvar Call = require('./Call');\nvar GetV = require('./GetV');\nvar IsPropertyKey = require('./IsPropertyKey');\n\n// https://ecma-international.org/ecma-262/6.0/#sec-invoke\n\nmodule.exports = function Invoke(O, P) {\n\tif (!IsPropertyKey(P)) {\n\t\tthrow new $TypeError('P must be a Property Key');\n\t}\n\tvar argumentsList = $arraySlice(arguments, 2);\n\tvar func = GetV(O, P);\n\treturn Call(func, O, argumentsList);\n};\n"]},"metadata":{},"sourceType":"script"}