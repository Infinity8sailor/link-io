{"ast":null,"code":"'use strict';\n\nvar GetIntrinsic = require('../GetIntrinsic');\n\nvar $TypeError = GetIntrinsic('%TypeError%');\n\nvar $setProto = require('../helpers/setProto');\n\nvar OrdinaryGetPrototypeOf = require('./OrdinaryGetPrototypeOf');\n\nvar Type = require('./Type'); // https://ecma-international.org/ecma-262/7.0/#sec-ordinarysetprototypeof\n\n\nmodule.exports = function OrdinarySetPrototypeOf(O, V) {\n  if (Type(V) !== 'Object' && Type(V) !== 'Null') {\n    throw new $TypeError('Assertion failed: V must be Object or Null');\n  }\n  /*\n     var extensible = IsExtensible(O);\n     var current = OrdinaryGetPrototypeOf(O);\n     if (SameValue(V, current)) {\n         return true;\n     }\n     if (!extensible) {\n         return false;\n     }\n     */\n\n\n  try {\n    $setProto(O, V);\n  } catch (e) {\n    return false;\n  }\n\n  return OrdinaryGetPrototypeOf(O) === V;\n  /*\n     var p = V;\n     var done = false;\n     while (!done) {\n         if (p === null) {\n             done = true;\n         } else if (SameValue(p, O)) {\n             return false;\n         } else {\n             if (wat) {\n                 done = true;\n             } else {\n                 p = p.[[Prototype]];\n             }\n         }\n      }\n      O.[[Prototype]] = V;\n      return true;\n      */\n};","map":{"version":3,"sources":["C:/Users/vaibhav/GIT-HUB/link-io/reactApp/node_modules/es-abstract/2019/OrdinarySetPrototypeOf.js"],"names":["GetIntrinsic","require","$TypeError","$setProto","OrdinaryGetPrototypeOf","Type","module","exports","OrdinarySetPrototypeOf","O","V","e"],"mappings":"AAAA;;AAEA,IAAIA,YAAY,GAAGC,OAAO,CAAC,iBAAD,CAA1B;;AAEA,IAAIC,UAAU,GAAGF,YAAY,CAAC,aAAD,CAA7B;;AAEA,IAAIG,SAAS,GAAGF,OAAO,CAAC,qBAAD,CAAvB;;AAEA,IAAIG,sBAAsB,GAAGH,OAAO,CAAC,0BAAD,CAApC;;AACA,IAAII,IAAI,GAAGJ,OAAO,CAAC,QAAD,CAAlB,C,CAEA;;;AAEAK,MAAM,CAACC,OAAP,GAAiB,SAASC,sBAAT,CAAgCC,CAAhC,EAAmCC,CAAnC,EAAsC;AACtD,MAAIL,IAAI,CAACK,CAAD,CAAJ,KAAY,QAAZ,IAAwBL,IAAI,CAACK,CAAD,CAAJ,KAAY,MAAxC,EAAgD;AAC/C,UAAM,IAAIR,UAAJ,CAAe,4CAAf,CAAN;AACA;AACD;;;;;;;;;;;;AAUA,MAAI;AACHC,IAAAA,SAAS,CAACM,CAAD,EAAIC,CAAJ,CAAT;AACA,GAFD,CAEE,OAAOC,CAAP,EAAU;AACX,WAAO,KAAP;AACA;;AACD,SAAOP,sBAAsB,CAACK,CAAD,CAAtB,KAA8BC,CAArC;AACA;;;;;;;;;;;;;;;;;;;AAmBA,CAvCD","sourcesContent":["'use strict';\n\nvar GetIntrinsic = require('../GetIntrinsic');\n\nvar $TypeError = GetIntrinsic('%TypeError%');\n\nvar $setProto = require('../helpers/setProto');\n\nvar OrdinaryGetPrototypeOf = require('./OrdinaryGetPrototypeOf');\nvar Type = require('./Type');\n\n// https://ecma-international.org/ecma-262/7.0/#sec-ordinarysetprototypeof\n\nmodule.exports = function OrdinarySetPrototypeOf(O, V) {\n\tif (Type(V) !== 'Object' && Type(V) !== 'Null') {\n\t\tthrow new $TypeError('Assertion failed: V must be Object or Null');\n\t}\n\t/*\n    var extensible = IsExtensible(O);\n    var current = OrdinaryGetPrototypeOf(O);\n    if (SameValue(V, current)) {\n        return true;\n    }\n    if (!extensible) {\n        return false;\n    }\n    */\n\ttry {\n\t\t$setProto(O, V);\n\t} catch (e) {\n\t\treturn false;\n\t}\n\treturn OrdinaryGetPrototypeOf(O) === V;\n\t/*\n    var p = V;\n    var done = false;\n    while (!done) {\n        if (p === null) {\n            done = true;\n        } else if (SameValue(p, O)) {\n            return false;\n        } else {\n            if (wat) {\n                done = true;\n            } else {\n                p = p.[[Prototype]];\n            }\n        }\n     }\n     O.[[Prototype]] = V;\n     return true;\n     */\n};\n"]},"metadata":{},"sourceType":"script"}