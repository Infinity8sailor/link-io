{"ast":null,"code":"'use strict';\n\nvar GetIntrinsic = require('../GetIntrinsic');\n\nvar IsInteger = require('./IsInteger');\n\nvar Type = require('./Type');\n\nvar MAX_SAFE_INTEGER = require('../helpers/maxSafeInteger');\n\nvar $TypeError = GetIntrinsic('%TypeError%');\n\nvar $charCodeAt = require('../helpers/callBound')('String.prototype.charCodeAt'); // https://ecma-international.org/ecma-262/6.0/#sec-advancestringindex\n\n\nmodule.exports = function AdvanceStringIndex(S, index, unicode) {\n  if (Type(S) !== 'String') {\n    throw new $TypeError('Assertion failed: `S` must be a String');\n  }\n\n  if (!IsInteger(index) || index < 0 || index > MAX_SAFE_INTEGER) {\n    throw new $TypeError('Assertion failed: `length` must be an integer >= 0 and <= 2**53');\n  }\n\n  if (Type(unicode) !== 'Boolean') {\n    throw new $TypeError('Assertion failed: `unicode` must be a Boolean');\n  }\n\n  if (!unicode) {\n    return index + 1;\n  }\n\n  var length = S.length;\n\n  if (index + 1 >= length) {\n    return index + 1;\n  }\n\n  var first = $charCodeAt(S, index);\n\n  if (first < 0xD800 || first > 0xDBFF) {\n    return index + 1;\n  }\n\n  var second = $charCodeAt(S, index + 1);\n\n  if (second < 0xDC00 || second > 0xDFFF) {\n    return index + 1;\n  }\n\n  return index + 2;\n};","map":{"version":3,"sources":["C:/Users/vaibhav/GIT-HUB/link-io/reactApp/node_modules/es-abstract/2019/AdvanceStringIndex.js"],"names":["GetIntrinsic","require","IsInteger","Type","MAX_SAFE_INTEGER","$TypeError","$charCodeAt","module","exports","AdvanceStringIndex","S","index","unicode","length","first","second"],"mappings":"AAAA;;AAEA,IAAIA,YAAY,GAAGC,OAAO,CAAC,iBAAD,CAA1B;;AAEA,IAAIC,SAAS,GAAGD,OAAO,CAAC,aAAD,CAAvB;;AACA,IAAIE,IAAI,GAAGF,OAAO,CAAC,QAAD,CAAlB;;AAEA,IAAIG,gBAAgB,GAAGH,OAAO,CAAC,2BAAD,CAA9B;;AAEA,IAAII,UAAU,GAAGL,YAAY,CAAC,aAAD,CAA7B;;AAEA,IAAIM,WAAW,GAAGL,OAAO,CAAC,sBAAD,CAAP,CAAgC,6BAAhC,CAAlB,C,CAEA;;;AAEAM,MAAM,CAACC,OAAP,GAAiB,SAASC,kBAAT,CAA4BC,CAA5B,EAA+BC,KAA/B,EAAsCC,OAAtC,EAA+C;AAC/D,MAAIT,IAAI,CAACO,CAAD,CAAJ,KAAY,QAAhB,EAA0B;AACzB,UAAM,IAAIL,UAAJ,CAAe,wCAAf,CAAN;AACA;;AACD,MAAI,CAACH,SAAS,CAACS,KAAD,CAAV,IAAqBA,KAAK,GAAG,CAA7B,IAAkCA,KAAK,GAAGP,gBAA9C,EAAgE;AAC/D,UAAM,IAAIC,UAAJ,CAAe,iEAAf,CAAN;AACA;;AACD,MAAIF,IAAI,CAACS,OAAD,CAAJ,KAAkB,SAAtB,EAAiC;AAChC,UAAM,IAAIP,UAAJ,CAAe,+CAAf,CAAN;AACA;;AACD,MAAI,CAACO,OAAL,EAAc;AACb,WAAOD,KAAK,GAAG,CAAf;AACA;;AACD,MAAIE,MAAM,GAAGH,CAAC,CAACG,MAAf;;AACA,MAAKF,KAAK,GAAG,CAAT,IAAeE,MAAnB,EAA2B;AAC1B,WAAOF,KAAK,GAAG,CAAf;AACA;;AAED,MAAIG,KAAK,GAAGR,WAAW,CAACI,CAAD,EAAIC,KAAJ,CAAvB;;AACA,MAAIG,KAAK,GAAG,MAAR,IAAkBA,KAAK,GAAG,MAA9B,EAAsC;AACrC,WAAOH,KAAK,GAAG,CAAf;AACA;;AAED,MAAII,MAAM,GAAGT,WAAW,CAACI,CAAD,EAAIC,KAAK,GAAG,CAAZ,CAAxB;;AACA,MAAII,MAAM,GAAG,MAAT,IAAmBA,MAAM,GAAG,MAAhC,EAAwC;AACvC,WAAOJ,KAAK,GAAG,CAAf;AACA;;AAED,SAAOA,KAAK,GAAG,CAAf;AACA,CA7BD","sourcesContent":["'use strict';\n\nvar GetIntrinsic = require('../GetIntrinsic');\n\nvar IsInteger = require('./IsInteger');\nvar Type = require('./Type');\n\nvar MAX_SAFE_INTEGER = require('../helpers/maxSafeInteger');\n\nvar $TypeError = GetIntrinsic('%TypeError%');\n\nvar $charCodeAt = require('../helpers/callBound')('String.prototype.charCodeAt');\n\n// https://ecma-international.org/ecma-262/6.0/#sec-advancestringindex\n\nmodule.exports = function AdvanceStringIndex(S, index, unicode) {\n\tif (Type(S) !== 'String') {\n\t\tthrow new $TypeError('Assertion failed: `S` must be a String');\n\t}\n\tif (!IsInteger(index) || index < 0 || index > MAX_SAFE_INTEGER) {\n\t\tthrow new $TypeError('Assertion failed: `length` must be an integer >= 0 and <= 2**53');\n\t}\n\tif (Type(unicode) !== 'Boolean') {\n\t\tthrow new $TypeError('Assertion failed: `unicode` must be a Boolean');\n\t}\n\tif (!unicode) {\n\t\treturn index + 1;\n\t}\n\tvar length = S.length;\n\tif ((index + 1) >= length) {\n\t\treturn index + 1;\n\t}\n\n\tvar first = $charCodeAt(S, index);\n\tif (first < 0xD800 || first > 0xDBFF) {\n\t\treturn index + 1;\n\t}\n\n\tvar second = $charCodeAt(S, index + 1);\n\tif (second < 0xDC00 || second > 0xDFFF) {\n\t\treturn index + 1;\n\t}\n\n\treturn index + 2;\n};\n"]},"metadata":{},"sourceType":"script"}