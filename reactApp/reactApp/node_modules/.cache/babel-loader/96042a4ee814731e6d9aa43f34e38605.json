{"ast":null,"code":"'use strict';\n\nvar hasSymbols = require('has-symbols')();\n\nvar GetIntrinsic = require('../GetIntrinsic');\n\nvar callBound = require('./callBound');\n\nvar $iterator = GetIntrinsic('%Symbol.iterator%', true);\nvar $stringSlice = callBound('String.prototype.slice');\n\nmodule.exports = function getIteratorMethod(ES, iterable) {\n  var usingIterator;\n\n  if (hasSymbols) {\n    usingIterator = ES.GetMethod(iterable, $iterator);\n  } else if (ES.IsArray(iterable)) {\n    usingIterator = function () {\n      var i = -1;\n      var arr = this; // eslint-disable-line no-invalid-this\n\n      return {\n        next: function () {\n          i += 1;\n          return {\n            done: i >= arr.length,\n            value: arr[i]\n          };\n        }\n      };\n    };\n  } else if (ES.Type(iterable) === 'String') {\n    usingIterator = function () {\n      var i = 0;\n      return {\n        next: function () {\n          var nextIndex = ES.AdvanceStringIndex(iterable, i, true);\n          var value = $stringSlice(iterable, i, nextIndex);\n          i = nextIndex;\n          return {\n            done: nextIndex > iterable.length,\n            value: value\n          };\n        }\n      };\n    };\n  }\n\n  return usingIterator;\n};","map":{"version":3,"sources":["C:/Users/vaibhav/GIT-HUB/link-io/reactApp/node_modules/es-abstract/helpers/getIteratorMethod.js"],"names":["hasSymbols","require","GetIntrinsic","callBound","$iterator","$stringSlice","module","exports","getIteratorMethod","ES","iterable","usingIterator","GetMethod","IsArray","i","arr","next","done","length","value","Type","nextIndex","AdvanceStringIndex"],"mappings":"AAAA;;AAEA,IAAIA,UAAU,GAAGC,OAAO,CAAC,aAAD,CAAP,EAAjB;;AACA,IAAIC,YAAY,GAAGD,OAAO,CAAC,iBAAD,CAA1B;;AACA,IAAIE,SAAS,GAAGF,OAAO,CAAC,aAAD,CAAvB;;AAEA,IAAIG,SAAS,GAAGF,YAAY,CAAC,mBAAD,EAAsB,IAAtB,CAA5B;AACA,IAAIG,YAAY,GAAGF,SAAS,CAAC,wBAAD,CAA5B;;AAEAG,MAAM,CAACC,OAAP,GAAiB,SAASC,iBAAT,CAA2BC,EAA3B,EAA+BC,QAA/B,EAAyC;AACzD,MAAIC,aAAJ;;AACA,MAAIX,UAAJ,EAAgB;AACfW,IAAAA,aAAa,GAAGF,EAAE,CAACG,SAAH,CAAaF,QAAb,EAAuBN,SAAvB,CAAhB;AACA,GAFD,MAEO,IAAIK,EAAE,CAACI,OAAH,CAAWH,QAAX,CAAJ,EAA0B;AAChCC,IAAAA,aAAa,GAAG,YAAY;AAC3B,UAAIG,CAAC,GAAG,CAAC,CAAT;AACA,UAAIC,GAAG,GAAG,IAAV,CAF2B,CAEX;;AAChB,aAAO;AACNC,QAAAA,IAAI,EAAE,YAAY;AACjBF,UAAAA,CAAC,IAAI,CAAL;AACA,iBAAO;AACNG,YAAAA,IAAI,EAAEH,CAAC,IAAIC,GAAG,CAACG,MADT;AAENC,YAAAA,KAAK,EAAEJ,GAAG,CAACD,CAAD;AAFJ,WAAP;AAIA;AAPK,OAAP;AASA,KAZD;AAaA,GAdM,MAcA,IAAIL,EAAE,CAACW,IAAH,CAAQV,QAAR,MAAsB,QAA1B,EAAoC;AAC1CC,IAAAA,aAAa,GAAG,YAAY;AAC3B,UAAIG,CAAC,GAAG,CAAR;AACA,aAAO;AACNE,QAAAA,IAAI,EAAE,YAAY;AACjB,cAAIK,SAAS,GAAGZ,EAAE,CAACa,kBAAH,CAAsBZ,QAAtB,EAAgCI,CAAhC,EAAmC,IAAnC,CAAhB;AACA,cAAIK,KAAK,GAAGd,YAAY,CAACK,QAAD,EAAWI,CAAX,EAAcO,SAAd,CAAxB;AACAP,UAAAA,CAAC,GAAGO,SAAJ;AACA,iBAAO;AACNJ,YAAAA,IAAI,EAAEI,SAAS,GAAGX,QAAQ,CAACQ,MADrB;AAENC,YAAAA,KAAK,EAAEA;AAFD,WAAP;AAIA;AATK,OAAP;AAWA,KAbD;AAcA;;AACD,SAAOR,aAAP;AACA,CAnCD","sourcesContent":["'use strict';\n\nvar hasSymbols = require('has-symbols')();\nvar GetIntrinsic = require('../GetIntrinsic');\nvar callBound = require('./callBound');\n\nvar $iterator = GetIntrinsic('%Symbol.iterator%', true);\nvar $stringSlice = callBound('String.prototype.slice');\n\nmodule.exports = function getIteratorMethod(ES, iterable) {\n\tvar usingIterator;\n\tif (hasSymbols) {\n\t\tusingIterator = ES.GetMethod(iterable, $iterator);\n\t} else if (ES.IsArray(iterable)) {\n\t\tusingIterator = function () {\n\t\t\tvar i = -1;\n\t\t\tvar arr = this; // eslint-disable-line no-invalid-this\n\t\t\treturn {\n\t\t\t\tnext: function () {\n\t\t\t\t\ti += 1;\n\t\t\t\t\treturn {\n\t\t\t\t\t\tdone: i >= arr.length,\n\t\t\t\t\t\tvalue: arr[i]\n\t\t\t\t\t};\n\t\t\t\t}\n\t\t\t};\n\t\t};\n\t} else if (ES.Type(iterable) === 'String') {\n\t\tusingIterator = function () {\n\t\t\tvar i = 0;\n\t\t\treturn {\n\t\t\t\tnext: function () {\n\t\t\t\t\tvar nextIndex = ES.AdvanceStringIndex(iterable, i, true);\n\t\t\t\t\tvar value = $stringSlice(iterable, i, nextIndex);\n\t\t\t\t\ti = nextIndex;\n\t\t\t\t\treturn {\n\t\t\t\t\t\tdone: nextIndex > iterable.length,\n\t\t\t\t\t\tvalue: value\n\t\t\t\t\t};\n\t\t\t\t}\n\t\t\t};\n\t\t};\n\t}\n\treturn usingIterator;\n};\n"]},"metadata":{},"sourceType":"script"}